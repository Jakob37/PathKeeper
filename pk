#!/usr/bin/env python

import sqlite3
import argparse
import time
import pathlib
import os.path
import inspect

src_file_path = inspect.getfile(lambda: None)
DB = os.path.dirname(src_file_path) + "test.db"


def main():
    args = parse_arguments()

    if args.subcommand == "setup":
        setup_db()

    if args.subcommand == "add":
        add_path(args.path, args.label)

    if args.subcommand == "rm":
        remove_path(args.path_id, args.type)

    if args.subcommand == "list":
        # con = sqlite3.connect("DB")
        list_all_paths(DB, args.showid)


def setup_db():
    DB = os.path.dirname(src_file_path) + "test.db"
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute("CREATE TABLE path(id, label, path)")
    con.commit()
    print(f"New db created in {DB}")


def remove_path(path_id: str, rm_type: "id|path|label" = "id"):
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f"DELETE FROM path WHERE {rm_type}='{path_id}'")
    con.commit()


# https://docs.python.org/3/library/sqlite3.html
def add_path(path: str, label: str = ""):
    my_id = time.time_ns()
    con = sqlite3.connect(DB)
    cur = con.cursor()
    cur.execute(f"INSERT INTO path VALUES ('{my_id}', '{label}', '{path}')")
    con.commit()


def list_all_paths(db: str, show_id: bool = False):
    con = sqlite3.connect(DB)
    cur = con.cursor()
    res = con.execute("SELECT * FROM path")

    header = f"path\tlabel"
    divider = "-" * 20
    if show_id:
        header = "id\t" + header
        divider = "-" * 30

    print(header)
    print(divider)
    for row in res.fetchall():
        label = row[1]
        path = row[2]
        value_line = f"{path}\t{label}"
        if show_id:
            path_id = row[0]
            value_line = f"{path_id}\t" + value_line
        print(value_line)


def parse_arguments() -> any:
    parser = argparse.ArgumentParser()

    sub_parsers = parser.add_subparsers(dest="subcommand", required=True)

    setup = sub_parsers.add_parser(
        "setup", help="Setup the db next to the called script"
    )

    add = sub_parsers.add_parser("add", help="Add new path")
    add.add_argument("path")
    add.add_argument("--label")

    remove = sub_parsers.add_parser("rm", help="Add new path")
    remove.add_argument("path_id")
    remove.add_argument("--type", default="id", help="Removal field type")

    list_paths = sub_parsers.add_parser("list", help="List paths")
    list_paths.add_argument(
        "--showid", action="store_const", const=True, help="Show ID column"
    )
    # list_paths.add_argument('')

    goto = sub_parsers.add_parser("goto", help="Go to path")
    goto.add_argument("path", help="Path")
    # parser_crazy.add_argument('--fool', action='store_const', const=True, help='it is foolish option')

    args = parser.parse_args()

    return args


if __name__ == "__main__":
    main()
